CodeGen for tile size == 1 for all trees
    * Add threshold and feature index type to tree type
    * Add tree types to forest type (list of individual tree types)
    * Write tiling helpers
        - Serialize model into file
        - Read model from file into buffer
     
    * LoadOp for tiled trees stored as memrefs
    * Lower custom tree ops to LLVM dialect
        - Non vector implementation

CodeGen for tile size != 1
    - Serialization when tile sizes are not 1
    - Vector implementations of tree ops

Code gen for unequal tile size across trees
    - Serialization when tile sizes are unequal across trees
    - Generate >1 model memrefs
    - ??


* Memref of memrefs, Memref of struct types
* Initialization of the model memrefs
    - Method to figure out the storage needed for each tree (number of nodes, size of each node)
    - Generate constants that can be used to initialize the model memref
* Add SIMD and Pipeline Containers
    - How will an Op contain other Ops?!
* Type inference and checking passes (NodeType and TreeType)
* Verify whether the features of the input are indexed with base 1 or 0 in XGBoost
* Tree types need to be part of the ensemble type (we may need to be able to tell tree tiling for a certain tree for example)

* [Defer] MLIR parse routines

* [Done] Add tiling information to tree types
    - Tiling info needs to be in two places -- the DecisionTree class and the TreeType class
* [Done] [Bug] The tensor from which result[i] is being read is not the "iteration tensor" of the the tree loop. 
* [Done] TreeEnsemble attribute
    - Needs to take the TreeEnsemble object and construct a storage class and attribute object
    - Hash for the storage key needs to be figured out (Type, TreeEnsemble)
* [Done] API to build TreeEnsembleAttribute from JSON parser
* [Done] Calls to Builder interface from JSON parser
    - Build methods for the predict op
    - Only needs to build two ops and set the corresponding attributes
* [Done] MLIR print routines for dialect
* [Done] Add batch size to high level IR 
* [Done] Tree constant op
* [Done] Forest constant op
* [Done] Figure out how to implement node types (sub-typing)
* [Done] Add document to describe the next level IR
* [Done] Implement the tree attribute
* [Done] Add TraverseTile for constant tree

